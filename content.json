{"meta":{"title":"Fantacy","subtitle":null,"description":null,"author":"Fantacy-Xu","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-06-05T02:34:09.000Z","updated":"2019-06-05T09:30:12.042Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"联系方式 Email：535137339@qq.com QQ：535137339 个人信息 许少锋/男/1997 技术博客：https://github.com/fantacy-Xu Github：https://github.com/fantacy-Xu 自我简介 对前端技术具有浓厚的兴趣，享受coding，喜欢逛掘金，博客园，知乎等论坛； 爱好游戏，主机游戏/网络游戏/手机游戏都有涉及； 小说轻度爱好者，平时无聊会看一些玄幻小说或名著，涉猎广泛； 性格随和，平时话语偏少，熟人之间话语相对较多。"},{"title":"tags","date":"2019-06-05T09:01:43.000Z","updated":"2019-06-05T09:02:02.665Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-06-05T08:57:52.000Z","updated":"2019-06-05T08:58:38.870Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"node.js","slug":"node-js","date":"2018-06-05T09:53:41.000Z","updated":"2019-06-05T12:28:48.729Z","comments":true,"path":"2018/06/05/node-js/","link":"","permalink":"http://yoursite.com/2018/06/05/node-js/","excerpt":"","text":"nodejs概述nodejs介绍 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 开发平台，使得JavaScript成为服务端开发语言得以实现。 何为开发平台？有对应的编程语言、有语言运行Runtime环境、有能实现特定功能的API（SDK：Software Development Kit）。 apache -php、tomcat - java、 nodejs- js 基于 node.js 可以开发桌面应用程序（GUI -借助 node-webkit、electron 等框架实现）、Web 应用程序（网站） 等。 node.js 相关网站 node.js官方网站 node.js中文网 node.js 中文社区 node.js 有哪些特点？ 单线程 (JavaScript运行机制) 非阻塞 I/O 模型，当执行异步I/O操作时，不会阻塞。（I/O=input/output） (JavaScript运行机制) IO:磁盘读写IO,网络IO 拥有世界最大的开源库生态系统 —— npm（Nodejs Package Manager即node包管理器） 浏览器、nodejs和其他服务器之间的关系 安装nodejs 由于Node.js平台是在后端运行JavaScript代码，所以，必须首先在本机安装Node环境 下载地址 当前版本 历史版本 官网术语解释 LTS 版本：Long-term Support 版本，长期支持版，即稳定版。 Current 版本：Latest Features 版本，最新版本，新特性会在该版本中最先加入。 注意： 安装完毕后通过命令：node -v来查看版本确定是否安装成功,安装成功也内置了npm命令，也可通过npm -v查看版本号。12345678Microsoft Windows [版本 10.0.17134.345](c) 2018 Microsoft Corporation。保留所有权利。C:\\Users\\Administrator&gt;node -vv10.15.0C:\\Users\\Administrator&gt;npm -v6.4.1 如需要可以配置环境变量。可以让node和npm命令在任意目录都可使用（注意：安装时默认配置了环境变量） 步骤：我的计算机-&gt;右键属性-&gt;高级系统设置-&gt;高级-&gt;环境变量-&gt;path 编写nodejs程序 之前所编写的javascript代码都是在浏览器中运行的，因此可以直接在浏览器的控制器console中编写js代码并运行。 现在我们编写的javascrip代码都是在Node环境中执行，执行方式有两种 方式一：在window命令行环境中输入指令node并回车，进行node的交互式环境,编写javascript代码执行即可。其中node交互式环境也称之为REPL(Read Eval Print Loop-读取评估打印循环 )，按两次ctrl+c,可退出REPL环境。 先输入node指令，进入node的交互式环境，在输入js代码。 12C:\\Users\\Administrator&gt;node&gt; 1+12 方式二：把javascript代码写在后缀为.js的文件中，如有一个hello.js文件，在window命令行中输入node hello.js即可执行。 如在hello.js中编写以下代码: 123var a = 1;var b = 1;console.log(a+b); 命令行中执行： node hello.js 思考:之前在浏览器中的的window、history、location、document等对象在node环境还支持吗？ 答:不支持了，因为window、history、location等对象是基于浏览器的，而现在我们是基于node环境。12345## node环境中输入会报错&gt; historyReferenceError: history is not defined&gt; windowReferenceError: window is not defined&gt; 注：在浏览器环境中全局对象是window，在node环境中全局对象变为global 通过nodejs 读写文件 官方文档：http://nodejs.cn/api/fs.html 使用到的文件系统模块var fs = require(‘fs’); 写文件：fs.writeFile(file, data[, options], callback); 参数1：要写入的文件路径，必填。 参数2：要写入的数据，必填。 参数3：写入文件时的选项，比如：文件编码。 参数4：文件写入完毕后的回调函数，必填。 写文件注意： 该操作采用异步执行 如果文件存在则替换原内容 默认写入的文件编码为utf8 回调函数有1个参数：err，表示在写入文件的操作过程中是否出错了。 如果出错了err != null，成功时 err === null 读文件：fs.readFile(file[, options], callback) 参数1：要读取的文件路径，必填。 参数2：读取文件时的选项，比如：文件编码utf8。选填。 参数3：文件读取完毕后的回调函数，必填。 读文件注意： 该操作采用异步执行 回调函数有两个参数，分别是err和data 如果读取文件时没有指定编码，那么返回的将是二进制数据，如果指定了编码如utf8，那么会返回指定的编码数据。 只要异步操作，回调函数第一个都是错误对象err优先 写入数据到文件12345678910//导入内置文件模块fs(file System)var fs = require(&apos;fs&apos;);var str = &apos;hello world 你好&apos;;//写入文件（文件不存在则自动创建）fs.writeFile(&apos;data.txt&apos;,str,&apos;utf8&apos;,function(err)&#123;if(err)&#123;//抛出错误信息throw err;&#125;console.log(&apos;写入ok&apos;);&#125;); 注：writeFile写入文件是先把文件内容清空在写入，如果要追加写入的话可以使用appendFile函数读取文件数据12345678var fs = require(&apos;fs&apos;);fs.readFile(&apos;./data.txt&apos;,&apos;utf8&apos;,function(err,data)&#123;if(err)&#123;throw err; //抛出异常信息&#125;//打印读取到的文件数据console.log(data);&#125;); 读写文件注意事项1. 异步操作无法通过 try-catch 来捕获异常，只能通过回调函数的 err参数 来判断是否出错。 2. 只有同步操作可以通过 try-catch 来捕获异常。 3. 不要使用 fs.existsSync(path, callback) 来判断文件是否存在，直接判断 err 即可 练习内置路径模块Path 文档链接：http://nodejs.cn/api/path.html使用内置模块http搭建web服务器（类似apache） 文档链接：http://nodejs.cn/api/http.html#http_http_createserver_options_requestlistener 步骤： 加载http模块 创建http服务， 服务端对象监听request 请求事件，用于监听客户端的请求 启动http服务，监听端口 参考代码： 123456789101112131415// 1. 加载http模块var http = require(&apos;http&apos;);// 2. 创建http服务，设置监听request 请求事件的处理程序var server = http.createServer();// 3. 服务端对象监听request 请求事件，用于监听客户端的请求server.on(&apos;request&apos;,function (req, res) &#123;//req-请求对象 , res-响应对象//处理客户端请求逻辑console.log(&apos;有人请求了~~&apos;);res.end(); //必须结束响应，否则浏览器会被挂起&#125;);// 4. 启动http服务，开始监听3000端口server.listen(3000, function () &#123;console.log(&apos;服务已经启动，请访问： http://localhost:3000&apos;);&#125;); 注意： 在监听request事件中，最后一定要res.end()结束响应。 浏览器显示中文可能是乱码，需设置响应头告诉浏览器显示时所使用的编码，要在res.end()之前设置12res.setHeader(&quot;Content-type&quot;,&quot;text/plain;charset=utf-8&quot;); // 响应为纯文本res.setHeader(&quot;Content-type&quot;,&quot;text/html;charset=utf-8&quot;); //响应为html格式，能够解析html标签 注意：Chrome 浏览器默认无法手动设置编码，需要安装”Set Character Encoding”扩展。 实现不同请求响应不同的静态文件 安装nodemon工具 每次修改完js文件之后，都要重新启动node服务，这样非常影响开发效率,使用nodemon工具会自动监测项目中的文件变化,一旦发现文件有改动,nodemon 会自动重启node服务 1npm install nodemon -g 注意：全局安装仅能当全局命令去使用。nrm（npm下载源管理器） 可参考地址：https://segmentfault.com/a/1190000000473869","categories":[{"name":"H5","slug":"H5","permalink":"http://yoursite.com/categories/H5/"},{"name":"node.Js","slug":"H5/node-Js","permalink":"http://yoursite.com/categories/H5/node-Js/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"},{"name":"node.js","slug":"node-js","permalink":"http://yoursite.com/tags/node-js/"}]},{"title":"设计者模式","slug":"设计者模式","date":"2018-06-03T08:54:45.000Z","updated":"2019-06-05T12:28:54.536Z","comments":true,"path":"2018/06/03/设计者模式/","link":"","permalink":"http://yoursite.com/2018/06/03/设计者模式/","excerpt":"","text":"设计者模式 设计模式什么是设计模式 设计模式 什么是设计模式设计模式（Design patern）是一套被反复使用、思想成熟、经过无数实战设计经验的总结。大白话：设计模式就是在特定场景解决特定的问题，如果某种办法都可以解决问题，我们就可以把这种通用的解决方法称之为模式。在代码中，其核心是代码的整体结构和解决问题的思路。 设计模式作用 代码复用 方便扩展 增加可维护性 其中设计模式最重要的一个原则是开闭原则，即对扩展 ，对修改关闭。 单例模式概念：一个类只产生唯一的一个实例。因为在许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。 作用：节省内存。 应用场景：如商城系统中购车对象是单例的。 示例1：创建单例对象12345678910function Person()&#123; //核心：通过一个实例属性，来判断之前是否创建过//没有创建，则创建对象 if( !Person.instance )&#123; Person.instance = &#123;&#125;; &#125;//为真，说明有这个属性，则直接返回实例对象 return Person.instance; &#125; var p1 = Person(); var p2 = Person(); console.log(p1 === p2); // true 内存空间地址相同的。 工厂模式（构造函数模式） 生活中的工厂就是批量生产产品的地方。如一个服装工厂,可以生产衣服和裤子等。在代码中，工厂模式就是是由一个方法来决定到底要创建哪个类的实例。如：宝马工厂创建x1和x5品牌汽车 1234567891011121314var factory = &#123;&#125;;factory.createProductA = function()&#123; console.log(&apos;A&apos;);&#125;factory.createProductB = function()&#123; console.log(&apos;B&apos;);&#125;factory.createProductC = function()&#123; console.log(&apos;C&apos;);&#125;factory.create = function(type)&#123; return new factory[type];&#125;//测试factory.create(&apos;createProductA&apos;); 什么时候使用工厂模式，分为以下几种情景： 对象的构建较复杂生成大量不同对象的时候 策略模式 每个问题都提前想好对应的解决方案（一种映射关系），而不是遇到问题再去手忙脚乱的想办法。 核心思想：提前想好策略. 代码：计算员工工资（工资由等级和底薪构成） 1234567891011121314151617//封装的策略算法var strategies = &#123; function (salary) &#123; return salary * 4; &#125;, function (salary) &#123; return salary * 3; &#125;, function (salary) &#123; return salary * 2; &#125; &#125;;//具体的计算方法 var calculateBonus = function (level, salary) &#123; return strategies[level](salary); &#125;; console.log(calculateBonus(&apos;S&apos;, 1000)); // 4000 console.log(calculateBonus(&apos;A&apos;, 4000)); // 12000 使用策略模式重构代码，在实际开发中，可以消除程序中大片的条件分支语句。 适配器模式 通俗理解：比如苹果插座是三孔的,这时候我们想要充电,但是并没有三孔的插头,这时候我们就需要适配器转换一下,这样我们就可以充电的,这就是适配器模式解决问题的场景。 适配器模式侧重点在于转换接口,解决不兼容问题代码体现：在前端开发中，如果后台接口返回的是一个对象格式，但是我们的需求是需要数组格式，怎么办？（前后端开始撕逼了…）那么这种问题，我们前端完全可以按照适配器的思想去定义一个方法来实现对象到数组的转换。代码如下： 1234567891011// 适配器模式// obj对象转换为数组function objToArray(obj) &#123; var arr = []; //新数组for (var i in obj) &#123; arr.push(obj[i]);&#125; return arr;&#125;// 创建一个对象var obj = &#123;name: &apos;大锤&apos;,age: 18,sex: &apos;男&apos;&#125;// 适配器方式转换console.log(objToArray(obj)); // [&amp;quot;大锤&amp;quot;, 18, &amp;quot;男&amp;quot;] 观察者模式 观察者模式也称之为发布订阅模式模式。 它定义了一种一对多的关系，让多个观察者对象同时监听某一个发布者对象，这个发布者对象的状态发生改变时就会通知所有的观察者对象。 如：多个人订阅微信公众号，微信公众号发布了文章，他们都可以收到。其中微信公众号就是发布者，其他人就是订阅者。代码:123456789101112131415161718192021222324252627282930313233//（发布者，微信公众号）被观察者function ObServer()&#123;//存储所有的订阅者（每一个订阅者是一个函数fn） this.funcs = [];&#125;ObServer.prototype.subscribe = function(fn)&#123; this.funcs.push(fn);&#125;ObServer.prototype.unsubscribe = function(fn)&#123; this.funcs = this.funcs.filter (function(item)&#123; if(item!==fn)&#123; return item; &#125; &#125;)&#125;ObServer.prototype.notify = function(msg)&#123; this.funcs.forEach(function(item)&#123; item(msg); &#125;);&#125;var o = new ObServer();var fn1 = function(msg)&#123; console.log(&apos;fn1收到通知了：&apos;+msg);&#125;var fn2 = function(msg)&#123; console.log(&apos;fn2收到通知了：&apos;+msg);&#125;o.subscribe(fn1);o.subscribe(fn2);o.notify(&apos;发布文章1&apos;);o.unsubscribe(fn2);console.log(o.funcs);o.notify(&apos;发布文章2&apos;)","categories":[{"name":"H5","slug":"H5","permalink":"http://yoursite.com/categories/H5/"},{"name":"设计者模式","slug":"H5/设计者模式","permalink":"http://yoursite.com/categories/H5/设计者模式/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"},{"name":"设计者模式","slug":"设计者模式","permalink":"http://yoursite.com/tags/设计者模式/"}]},{"title":"闭包","slug":"闭包","date":"2018-06-03T08:54:45.000Z","updated":"2019-06-05T12:28:43.721Z","comments":true,"path":"2018/06/03/闭包/","link":"","permalink":"http://yoursite.com/2018/06/03/闭包/","excerpt":"","text":"闭包 什么是闭包 闭包：是指有权访问其他函数中局部变量的函数。 闭包作用 先看下面一段代码：12345678910function A()&#123; var a = 10; // 局部变量a function B()&#123; console.log(a); // 10 &#125; return B; // 最后返回函数B,函数B就是我们的闭包&#125;var result = A(); // result就是整个B函数result(); // 解释： 由于函数A内部的局部变量a不能被A以外的函数访问到，只能被A内部的子函数B访问到，这是由于JavaScript的链式作用域结构导致的，既然只有内部函数B才可以访问到函数A中的局部变量a，那么我们只需要把函数B作为函数A的返回值，就可以在函数A外部访问它的局部变量a！ 其中函数B就是闭包。 由上可知： 闭包就是一个函数。 闭包作用：访问其他函数内部的局部变量。 所以，在函数内部创建子函数，最后返回子函数，这是平常开发创建闭包最常见的方式。 面向对象中使用闭包读取设置私有属性 1234567891011121314151617181920212223 //使用构造函数创建一个Person class Person&#123;&#125;function Person(name,age)&#123; this.name = name; // this公有属性 var age = age; // var 私有属性 //通过一个公有的函数来访问其私有属性 this.getAge = function()&#123; return &quot;age:&quot;+age; &#125; //通过一个闭包函数来修改其私有属性 this.setAge = function(newage)&#123; age = newage; &#125;&#125;//实例化一个实例对象var p1 = new Person(&apos;大锤&apos;,18);console.log(p1.age); // undefined 不能直接读取私有属性console.log( p1.getAge() ); // 18p1.setAge(&apos;38&apos;);console.log( p1.getAge() ); // 38 由于var定义的属性是私有属性（局部变量），因此只能通过闭包函数去读取。 注意，由于闭包可以访问函数内的局部变量，所以此变量是不会被垃圾回收机制回收的，使用不当还可能造成会内存泄漏（未能释放已经不再使用的内存）。 继承 回顾创建对象的方式 通过new Object()或{}，两种本质是一样的，后者是前者的语法糖形式（简写形式）。 工厂方式创建对象 构造函数和原型对象（定理） 构造函数有个prototype属性，指向原型对象 原型对象有个constructor属性，指向构造函数本身。 通过构造函数new出来的对象，有个隐形的属性proto属性，指向原型对象。 call和apply 1、call和apply作用 执行函数并改变函数中的this指向。 2、call和apply的区别 语法如下所示：12fuName.call(obj,实参数1，实参数2...) fuName.apply(obj, [ 参数1，参数2..... ] ) 说明：使用对象obj伪造函数fuName中的this，于是函数fuName中的this都被obj对象伪造了。 相同点：都是改变函数内this的指向。 不同点：参数传递的形式不一样。 call参数是一个一个传，需要传递几个就需要看函数需要几个形参。 apply是传递一个参数数组，如果apply是使用在某个函数内,则参数数组可以使用类数组arguments进行代替。 call和apply继承代码实现 1、通过call或者apply继承的思想： 在子类的构造函数中，使用call或apply去伪造父类构造函数中的this，把父类构造函数中的属性添加到子类对象的自身空间中。 3、 call或apply继承带来的缺点 通过call或apply只能会把父类构造函数中定义的属性复制一份到子类对象自身空间中，但是无法继承到父类原型对象上面的属性。 解决办法： 通过原型继承来实现，可以继承父类原型对象中的属性。 通过原型对象继承 1、原型对象继承的核心思想 用父类对象重写子类原型对象。核心代码如下 1子类.prototype = new 父类() 2、代码实现即内存空间图解 3、通过原型继承带来的问题 当子类的某个对象对引用类型属性如数组添加一个值的时候，实质上，我们是把此值添加在子类原型对象的属性中，这样会造成所有子类对象对此属性的读取，这是我们不允许的。 我们希望，每个子类自身空间中都独有一份引用属性，则当子类对象修改的时候只会影响当前对象，对其他对象没有任何影响。 解决办法：通过混合继承。 通过伪造继承+原型继承混合起来，就可以解决伪造继承和原型继承单独使用带来的问题。 混合继承（伪造+原型对象) 1、伪造继承和原型继承分别带来的问题 伪造继承带来的问题：只能将父类构造函数中的属性放到子类对象的自身空间中，但是无法继承父类原型对象上面的属性。 原型继承带来的问题：子类对象只能继承父类原型对象上面的属性，但是无法把父类构造函数中的属性放到自身空间中。 2、通过伪造和原型对象混合继承的核心思想： 通过伪造继承,把父类构造函数中的属性添加到子类对象的自身空间中 通过原型继承,继承到父类原型上面的属性 最后把他们两者组合起来即可（形成互补） 如： 伪造继承：它会喝酒，但不会抽烟原型继承：不会喝酒，但会抽烟组合起来，可实现又会抽烟又会抽烟。 （ps:少抽烟喝酒，年轻人身体最重要） 3、代码实现 通过es6创建类和继承 class 定义类 extends 继承 1234567891011121314151617181920212223242526272829//创建父类Parentclass Parent&#123; //构造函数(不要加关键字function) constructor(name,age)&#123; this.name = name; this.age = age; &#125; getName()&#123; return this.name; &#125;&#125;//创建子类Child继承Parentclass Child extends Parent&#123; //构造函数(不要加关键字function) constructor(name,age,email)&#123; //执行父类的构造函数，继承name和age属性，到子类对象自身空间中 super(name,age); this.email = email; &#125; getAge()&#123; return this.age; &#125;&#125;//实例化子类对象var c = new Child(&apos;zs&apos;,33,&apos;zs@qq.com&apos;)console.log( c.getAge() ); // 33console.log( c.getName() ); // zs class和extends底层还是通过原型对象来实现的，其是原型对象的一种语法糖形式（简化写法） 继承小结 使用混合继承（伪造+原型对象)要点： 利用伪造call或apply继承父类构造函数中的属性到子类的自身空间中 利用原型对象继承父类原型对象上的属性 最终将a、b两种组合起来即可实现完整的继承。 继承原型链终极图解 在js继承体系中，最终都是通过对象的proto找到其对应的原型对象，最终实现继承。 注意： 函数没有返回值，默认返回undefined函数名.length 查看最少传递的实参个数。","categories":[{"name":"H5","slug":"H5","permalink":"http://yoursite.com/categories/H5/"},{"name":"闭包","slug":"H5/闭包","permalink":"http://yoursite.com/categories/H5/闭包/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"},{"name":"闭包","slug":"闭包","permalink":"http://yoursite.com/tags/闭包/"}]},{"title":"原型链与继承","slug":"原型链与继承","date":"2018-06-03T08:54:45.000Z","updated":"2019-06-05T13:10:55.918Z","comments":true,"path":"2018/06/03/原型链与继承/","link":"","permalink":"http://yoursite.com/2018/06/03/原型链与继承/","excerpt":"","text":"原型链与继承 摘自Javascript高级程序设计: 继承是OO语言（Object-Oriented语言）中的一个最为人津津乐道的概念，许多OO语言都支持两种继承方式，接口继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法，由于js中方法没有签名，在ECMAScript中无法实现接口继承，ECMAScript只支持实现继承，而且其实现继承主要是依靠原型链来实现的 概念： 简单回顾下构造函数，原型和实例的关系 每个构造函数（constructor）都有一个原型对象（prototype），原型对象都包含一个指向构造函数的指针，而实例（instance）都包含一个指向原型对象的内部指针。 JS对象的圈子里有这么个游戏规则： 如果试图引用对象（实例instance）的某个属性，会首先在对象内部寻找该属性，直至找不到，然后才在该对象的原型（instance.prototype）里去找这个属性 如果让原型对象指向另一个类型的实例…这时则会： 1constructor1.prototype = instance2 鉴于上述游戏规则生效，如果试图引用constructor1构造的实例instance1的某个属性p1 1）首先会在instance1内部属性中找一遍 2）接着会在instance1.__proto__(constructor1.prototype)中找一遍，而constructor1.prototype实际上instance2，也就是说在instance2中寻找该属性p1 3）如果instance2中还是没有，此时程序不会停止寻找，它会继续在instance2.__proto__(constructor2.prototype)中寻找，直到Object（基类）的原型对象1搜索轨迹：instance1 --&gt;instance2 --&gt;constructor2.prototype... --&gt;Object.prototype 这种搜索的轨迹，形似一条长链，又因为prototype在这个游戏规则中充当链接的作用，于是我们把这种实例与原型的链条称作为原型链，下面举例： 12345678910111213141516function Father()&#123; this.property = true;&#125;Father.prototype.getFatherValue = function()&#123; return this.property;&#125;function Son()&#123; this.sonProperty = false;&#125;//继承Son.prototype = new Father();//Son.prototype被重写，导致Son.prototype.constructor也一同被重写Son.prototype.getSonValue = function()&#123; return this.sonProperty;&#125;var instance = new Son();alert(instance.getFatherValue()); //true instance 实例通过原型链找到了Father原型中的getFatherValue方法 注意，此时instance.constructor指向的是Father，这是因为Son.prototype中的constructor被重写的缘故 确定原型和实例的关系 使用原型链后，如何去判断判断原型和实例的这种继承关系？ 两种方法 第一种是使用instanceOf 操作符，只要用这个操作符来测试实例（instance）与原型链中出现过的构造函数，结果就会返回true，以下几行代码就说明了。 123alert(instance instanceOf Object); //truealert(instance instanceOf Father); //truealert(instance instanceOf Son); //true","categories":[{"name":"H5","slug":"H5","permalink":"http://yoursite.com/categories/H5/"},{"name":"原型链与继承","slug":"H5/原型链与继承","permalink":"http://yoursite.com/categories/H5/原型链与继承/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"},{"name":"原型链","slug":"原型链","permalink":"http://yoursite.com/tags/原型链/"}]},{"title":"作用域链","slug":"作用域链","date":"2018-06-03T08:54:45.000Z","updated":"2019-06-05T13:04:24.389Z","comments":true,"path":"2018/06/03/作用域链/","link":"","permalink":"http://yoursite.com/2018/06/03/作用域链/","excerpt":"","text":"","categories":[{"name":"H5","slug":"H5","permalink":"http://yoursite.com/categories/H5/"},{"name":"作用域链","slug":"H5/作用域链","permalink":"http://yoursite.com/categories/H5/作用域链/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"},{"name":"作用域链","slug":"作用域链","permalink":"http://yoursite.com/tags/作用域链/"}]},{"title":"Hexo使用攻略","slug":"Hexo使用攻略","date":"2018-05-27T13:54:12.000Z","updated":"2019-06-05T12:05:37.423Z","comments":true,"path":"2018/05/27/Hexo使用攻略/","link":"","permalink":"http://yoursite.com/2018/05/27/Hexo使用攻略/","excerpt":"","text":"创建“分类”选项 生成“分类”页并添加type属性 打开命令，进入博客所在文件夹，执行命令 1$ hexo new page categories 成功后会提示： 1INFO Created: ~/Documents/blog/source/categories/index.md 根据上面的路径，找到index.md 这个文件，打开后默认内容是这样的： 1234---title: 文章分类date: 2018-05-27 21:54:12--- 添加 type: “categories”到内容中，添加后是这样的： 12345---title: 文章分类date: 2018-05-27 21:54:12type: &quot;categories&quot;--- 保存并关闭文件。 给文章添加”categories”属性 打开需要添加分类的文章，为其添加categories属性。下方的categories:JS 表示添加这篇文章到 “JS” 这个分类。 注意： hexo 一篇文章只能属于一个分类，也就是说如果在 “JS”下方添加 “-xxx”,hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “-JS”下的 “-xxx分类”）。 123456---title:jQuery对表单的操作及更多应用date: 2018-05-27 21:54:12categories: - JS--- 成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories:xxx的文章才会被收录到首页的“分类”中。 创建“标签”选项 生成“标签”页并添加tpye属性 打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page tags 成功后会提示： 1INFO Created: ~/Documents/blog/source/tags/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 标签date: 2018-05-27 21:54:12--- 添加type: “tags”到内容中，添加后是这样的： 12345---title: 文章分类date: 2018-05-27 21:54:12type: &quot;tags&quot;--- 保存并关闭文件。 给文章添加“tags”属性 打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 表单验证就是这篇文章的标签了 12345678910---title: jQuery对表单的操作及更多应用date: 2018-05-27 21:54:12categories: - JStags:- jQuery- js- animate--- 至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。 细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。 所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。 scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。 参考网址：https://www.jianshu.com/p/e17711e44e00?tdsourcetag=s_pctim_aiomsg","categories":[{"name":"Hexo使用方式","slug":"Hexo使用方式","permalink":"http://yoursite.com/categories/Hexo使用方式/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Hexo 添加分类及标签","slug":"Hexo-添加分类及标签","permalink":"http://yoursite.com/tags/Hexo-添加分类及标签/"}]}]}